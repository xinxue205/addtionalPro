package netty.client;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import netty.protocol.MsgProtocol;
import netty.protocol.ProtocolDecoder;
import netty.protocol.ProtocolEncoder;  
  
public class Client {  
  
    /** 
     * 连接服务器 
     *  
     * @param port 
     * @param host 
     * @throws Exception 
     */  
    public void connect(int port, String host) throws Exception {  
        // 配置客户端NIO线程组  
        EventLoopGroup group = new NioEventLoopGroup();  
        try {  
            // 客户端辅助启动类 对客户端配置  
            Bootstrap b = new Bootstrap();  
            b.group(group)//  
                    .channel(NioSocketChannel.class)//  
                    .option(ChannelOption.TCP_NODELAY, true)//  
                    .handler(new MyChannelHandler());//  
            // 异步链接服务器 同步等待链接成功  
            final Channel ch = b.connect(host, port).sync().channel();  
  
            new Thread() {
            	@Override
            	public void run() {
            		try {
						Thread.sleep(11555);
						ch.writeAndFlush(new MsgProtocol("i am still ok now"));
						Thread.sleep(11333);
						ch.writeAndFlush(new MsgProtocol("i'll close connect soon, bye!") );
						ch.close().sync();
            		} catch (InterruptedException e) {
            			e.printStackTrace();
            		}
            	}
            }.start();
            // 等待链接关闭  
            ch.closeFuture().sync();  
            
        } finally {  
            group.shutdownGracefully();  
            System.out.println("客户端优雅的释放了线程资源...");  
        }  
    }  
  
    /** 
     * 网络事件处理器 
     */  
    private class MyChannelHandler extends ChannelInitializer<SocketChannel> {  
        @Override  
        protected void initChannel(SocketChannel ch) throws Exception {  
            // 添加自定义协议的编解码工具  
            ch.pipeline().addLast(new ProtocolEncoder());  
            ch.pipeline().addLast(new ProtocolDecoder());  
            // 处理网络IO  
            ch.pipeline().addLast(new ClientHandler());  
        }  
  
    }  
  
    public static void main(String[] args) throws Exception {  
        new Client().connect(8889, "127.0.0.1");  
  
    }  
  
}
